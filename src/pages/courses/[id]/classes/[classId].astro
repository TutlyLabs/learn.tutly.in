---
import RootLayout from "@/layouts/RootLayout.astro";
import ClassSidebar from "./_components/classSidebar";
import Class from "./_components/Class";
import db from "@/lib/db";

const currentUser = Astro.locals.user;

if (!currentUser) return null;
const classesWithFolders = await db.class.findMany({
  where: {
    courseId: Astro.params.id!,
  },
  include: {
    Folder: true,
  },
  orderBy: {
    createdAt: "asc",
  },
});

const classId = Astro.params.classId!;
const courseId = Astro.params.id!;

const classDetails = await db.class.findUnique({
  where: {
    id: classId,
  },
  include: {
    video: true,
    attachments: true,
    Folder: true,
  },
});

const initialNote = await db.notes.findUnique({
  where: {
    userId_objectId: {
      userId: currentUser.id,
      objectId: classId,
    },
  },
});

const bookmark = await db.bookMarks.findUnique({
  where: {
    userId_objectId: {
      userId: currentUser.id,
      objectId: classId,
    },
  },
});

const isBookmarked = bookmark ? true : false;
---

<RootLayout title="Classes" forceClose={true}>
  <div class="flex items-start w-full">
    <ClassSidebar
      client:only="react"
      courseId={String(Astro.params.id)}
      classes={classesWithFolders || []}
      title="Assignments"
      currentUser={currentUser}
      isCourseAdmin={currentUser.role === "INSTRUCTOR"}
    />
    <div class="w-full m-3">
      <Class
        classes={classesWithFolders || []}
        classId={classId}
        courseId={courseId}
        currentUser={currentUser}
        details={classDetails}
        isBookmarked={isBookmarked}
        initialNote={initialNote}
        client:only="react"
      />
    </div>
  </div>
</RootLayout>
