---
import RootLayout from "@/layouts/RootLayout.astro";
import NoDataFound from "@/components/NoDataFound";
import db from "@/lib/db";
import SingleAssignmentBoard from "../_components/assignmentBoard";

const currentUser = Astro.locals.user;
if (!currentUser) return null;

let courses = await db.course.findMany({
  where: {
    enrolledUsers: {
      some: {
        username: currentUser.username,
      },
    },
  },
  select: {
    id: true,
    title: true,
  },
});

if (currentUser.role !== "INSTRUCTOR") {
  courses = [];
}

const coursesWithAssignments = await db.course.findMany({
  where: {
    id: {
      in: courses.map((course) => course.id),
    },
  },
  select: {
    id: true,
    classes: {
      select: {
        id: true,
        createdAt: true,
        attachments: {
          where: {
            attachmentType: "ASSIGNMENT",
          },
          select: {
            id: true,
            title: true,
            class: {
              select: {
                title: true,
              },
            },
            submissions: {
              select: {
                id: true,
                points: {
                  select: {
                    id: true,
                  },
                },
              },
            },
          },
        },
      },
      orderBy: {
        createdAt: "asc",
      },
    },
  },
});

const sortedAssignments = coursesWithAssignments.map((course) => ({
  ...course,
  classes: course.classes
    .map((cls) => ({
      ...cls,
      attachments: cls.attachments.sort((a, b) => a.title.localeCompare(b.title)),
    }))
    .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()),
}));
---

<RootLayout title="Get By Assignments">
  <div class="flex flex-col gap-4 py-2 md:mx-14 md:px-8">
    <div>
      <h1
        class="m-2 rounded-lg bg-gradient-to-r from-blue-600 to-sky-500 py-2 text-center text-xl font-semibold"
      >
        Students
      </h1>
      {
        courses && courses.length > 0 ? (
          <>
            <SingleAssignmentBoard
              courses={courses}
              assignments={sortedAssignments as any}
              role={currentUser.role}
              currentUser={currentUser}
              client:load
            />
          </>
        ) : (
          <NoDataFound message="No students found!" client:load />
        )
      }
    </div>
  </div>
</RootLayout>
