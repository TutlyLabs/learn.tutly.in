---
import RootLayout from "@/layouts/RootLayout.astro";
import { Role } from "@prisma/client";
import { DashboardData } from "@/types/dashboard";
import Page from "./page";
import { createServerCaller } from "@/trpc/server";

const currentUser = Astro.locals.user!;

const role: Role = currentUser.role;
let dashboardData: DashboardData | null = null;

const caller = await createServerCaller(Astro.request);

if (role === Role.STUDENT) {
  const enrolledCourses = await caller.courses.studentDashboardData({
    username: currentUser.username,
  });

  dashboardData = {
    courses: enrolledCourses.map((enrolledCourse) => {
      const courseAssignments = enrolledCourse.course?.attachments || [];
      const submissions = courseAssignments.flatMap((a) => a.submissions);

      const totalPoints = submissions.reduce(
        (acc, curr) => acc + curr.points.reduce((acc, curr) => acc + curr.score, 0),
        0
      );

      return {
        courseId: enrolledCourse.course?.id,
        courseTitle: enrolledCourse.course?.title,
        assignments: courseAssignments,
        assignmentsSubmitted: submissions.length,
        totalPoints,
        totalAssignments: courseAssignments.length,
      };
    }),
    currentUser,
  };
} else if (role === Role.MENTOR) {
  const mentorCourses = await caller.courses.mentorDashboardData({
    username: currentUser.username,
  });

  dashboardData = {
    courses: mentorCourses.map((mentorCourse) => {
      const courseEnrollments = mentorCourse.enrolledUsers || [];
      const submissions = courseEnrollments.flatMap((e) => e.submission);
      const evaluatedSubmissions = submissions.filter((s) => s.points.some((p) => p.score > 0));

      return {
        courseId: mentorCourse.id,
        courseTitle: mentorCourse.title,
        assignments: mentorCourse.attachments || [],
        menteeCount: courseEnrollments.length,
        evaluatedAssignments: evaluatedSubmissions.length,
        totalSubmissions: submissions.length,
      };
    }),
  };
} else if (role === Role.INSTRUCTOR) {
  const courses = await caller.courses.instructorDashboardData({
    id: currentUser.id,
  });

  dashboardData = {
    courses: courses.map((course) => ({
      courseId: course.id,
      courseTitle: course.title,
      classCount: course._count.classes,
      studentCount: course._count.enrolledUsers,
    })),
    totalCourses: courses.length,
  };
}

const name = currentUser.name;
---

<RootLayout title="Dashboard">
  <Page dashboardData={dashboardData} name={name} currentUser={currentUser} client:load />
</RootLayout>
