---
import RootLayout from "@/layouts/RootLayout.astro";
import LeaderBoard from "@/components/leaderBoard.tsx";
import db from "@/lib/db";

const currentUser = Astro.locals.user;
if (!currentUser) return null;

const searchParams = Astro.url.searchParams;
const selectedCourse = searchParams.get("course");
const selectedMentor = searchParams.get("mentor");

const enrolledCourses = await db.enrolledUsers.findMany({
  where: {
    username: currentUser.username,
    courseId: {
      not: null,
    },
  },
  include: {
    course: {
      select: {
        id: true,
        title: true,
        isPublished: true,
      },
    },
  },
});

const courses = enrolledCourses
  .map((enrolled) => enrolled.course)
  .filter((course): course is NonNullable<typeof course> => course !== null);

const courseIds = courses.map((course) => course.id);

const mentors =
  currentUser.role === "INSTRUCTOR"
    ? await db.enrolledUsers.findMany({
        where: {
          courseId: {
            in: courseIds,
          },
          user: {
            role: "MENTOR",
            organizationId: currentUser.organizationId,
          },
        },
        include: {
          user: {
            select: {
              id: true,
              username: true,
              name: true,
              image: true,
              mobile: true,
            },
          },
        },
        distinct: ["username"],
      })
    : [];

const submissionsWhere = selectedCourse
  ? {
      enrolledUser: {
        courseId: selectedCourse,
        ...(currentUser.role === "MENTOR" ? { mentorUsername: currentUser.username } : {}),
      },
    }
  : {};

const submissions = selectedCourse
  ? await db.submission.findMany({
      where: submissionsWhere,
      include: {
        points: true,
        enrolledUser: {
          select: {
            user: {
              select: {
                id: true,
                name: true,
                username: true,
                image: true,
              },
            },
            mentor: {
              select: {
                username: true,
              },
            },
          },
        },
        assignment: {
          select: {
            class: {
              select: {
                course: {
                  select: {
                    id: true,
                  },
                },
              },
            },
          },
        },
      },
    })
  : [];

const totalPoints = submissions.map((submission) => {
  const totalPoints = submission.points.reduce(
    (acc: number, curr: { score: number | null }) => acc + (curr.score ?? 0),
    0
  );
  return { ...submission, totalPoints };
});

const sortedSubmissions = totalPoints
  .sort((a, b) => b.totalPoints - a.totalPoints)
  .map((submission, index) => ({
    ...submission,
    rank: index + 1,
  }));

const publishedCourses = courses.filter((course) => course.isPublished);
const accessibleCourses = currentUser.role === "INSTRUCTOR" ? courses : publishedCourses;

const formattedMentors = mentors.map((mentor) => ({
  id: mentor.user.id,
  username: mentor.user.username,
  name: mentor.user.name,
  image: mentor.user.image,
  mobile: mentor.user.mobile,
}));
---

<RootLayout title="Leaderboard">
  <LeaderBoard
    submissions={sortedSubmissions}
    courses={accessibleCourses}
    currentUser={currentUser}
    mentors={formattedMentors}
    selectedCourse={selectedCourse}
    selectedMentor={selectedMentor}
    client:load
  />
</RootLayout>
