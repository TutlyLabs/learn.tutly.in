---
import db from "@/lib/db";
import RootLayout from "@/layouts/RootLayout.astro";
import UserPage from "./_components/UserPage";

const user = Astro.locals.user;

if ((user?.role !== "INSTRUCTOR" && user?.role !== "MENTOR") || !user) {
  return Astro.redirect(`/404`);
}

const searchTerm = Astro.url.searchParams.get("search") || "";
const sortField = Astro.url.searchParams.get("sort") || "name";
const sortDirection = Astro.url.searchParams.get("direction") || "asc";
const filters = Astro.url.searchParams.getAll("filter");
const page = parseInt(Astro.url.searchParams.get("page") || "1");
const limit = parseInt(Astro.url.searchParams.get("limit") || "10");

const activeFilters = filters
  .map((f) => {
    const [column, operator, value] = f.split(":");
    return { column, operator, value };
  })
  .filter((f) => f.column && f.operator && f.value);

// First get all courses based on role
const courses = await db.course.findMany({
  where:
    user.role === "INSTRUCTOR"
      ? { createdById: user.id }
      : {
          enrolledUsers: {
            some: {
              mentorUsername: user.username,
            },
          },
        },
  select: {
    id: true,
  },
});

const courseIds = courses.map((course) => course.id);

// Build where clause for enrolled users
let where: Record<string, any> = {
  courseId: {
    in: courseIds,
  },
  user: {
    role: {
      in: ["STUDENT", "MENTOR"],
    },
    organizationId: user.organizationId,
  },
};

if (user.role === "MENTOR") {
  where.mentorUsername = user.username;
}

if (searchTerm) {
  where.user.OR = [
    { name: { contains: searchTerm, mode: "insensitive" } },
    { username: { contains: searchTerm, mode: "insensitive" } },
    { email: { contains: searchTerm, mode: "insensitive" } },
  ];
}

activeFilters.forEach((filter) => {
  const { column, operator, value } = filter;

  if (typeof column === "string") {
    switch (operator) {
      case "contains":
        where.user[column] = { contains: value, mode: "insensitive" };
        break;
      case "equals":
        where.user[column] = value;
        break;
      case "startsWith":
        where.user[column] = { startsWith: value, mode: "insensitive" };
        break;
      case "endsWith":
        where.user[column] = { endsWith: value, mode: "insensitive" };
        break;
      case "greaterThan":
        where.user[column] = { gt: Number(value) };
        break;
      case "lessThan":
        where.user[column] = { lt: Number(value) };
        break;
    }
  }
});

const totalItems = await db.enrolledUsers.count({ where });

const enrolledUsers = await db.enrolledUsers.findMany({
  where,
  include: {
    user: {
      select: {
        id: true,
        name: true,
        username: true,
        email: true,
        role: true,
        oneTimePassword: true,
      },
    },
  },
  orderBy: {
    user: {
      [sortField]: sortDirection,
    },
  },
  skip: (page - 1) * limit,
  take: limit,
  distinct: ["username"],
});

const allUsers = enrolledUsers.map((enrolled) => ({
  ...enrolled.user,
  courseId: enrolled.courseId,
  mentorUsername: enrolled.mentorUsername,
}));
---

<RootLayout title="Users">
  <UserPage
    data={allUsers}
    totalItems={totalItems}
    userRole={user.role}
    isAdmin={user.isAdmin}
    client:load
  />
</RootLayout>
