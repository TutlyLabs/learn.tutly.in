---
import RootLayout from "@layouts/RootLayout.astro";
import AssignmentPage from "../_components/AssignmentPage";
import db from "@/lib/db";

const currentUser = Astro.locals.user;
if (!currentUser) return null;

const userId = (Astro.url.searchParams.get("userId") as string) || currentUser.id;
const username = Astro.url.searchParams.get("username");
const assignment1 = await db.attachment.findUnique({
  where: {
    id: Astro.params.id!,
  },
  include: {
    class: {
      include: {
        course: {
          include: {
            classes: true,
          },
        },
      },
    },
    course: true,
    submissions: {
      where: {
        enrolledUser: {
          user: {
            id: userId,
          },
        },
      },
      include: {
        enrolledUser: {
          include: {
            submission: true,
          },
        },
        points: true,
      },
    },
  },
});
let sortedAssignments, notSubmittedMentees, isCourseAdmin;
if (currentUser.role == "INSTRUCTOR") {
  const assignment = await db.attachment.findUnique({
    where: {
      id: Astro.params.id!,
    },
    include: {
      class: {
        include: {
          course: {
            where: {
              createdById: currentUser.id,
            },
          },
        },
      },
      submissions: {
        include: {
          enrolledUser: {
            include: {
              submission: true,
            },
          },
          points: true,
        },
      },
    },
  });
  const allStudents = await db.enrolledUsers.findMany({
    where: {
      course: {
        createdById: currentUser.id,
      },
      mentorUsername: {
        not: null,
      },
    },
  });
  notSubmittedMentees = allStudents.filter((student) => {
    return !assignment?.submissions.some(
      (submission) => submission.enrolledUser.username === student.username
    );
  });

  sortedAssignments = assignment?.submissions.sort((a, b) => {
    if (b.enrolledUser.username > a.enrolledUser.username) {
      return -1;
    } else if (b.enrolledUser.username < a.enrolledUser.username) {
      return 1;
    } else {
      return 0;
    }
  });
  isCourseAdmin = currentUser.id === assignment1?.course?.createdById;
} else if (currentUser.role == "MENTOR") {
  const assignment = await db.attachment.findUnique({
    where: {
      id: Astro.params.id!,
    },
    include: {
      class: {
        include: {
          course: true,
        },
      },
      submissions: {
        where: {
          enrolledUser: {
            mentorUsername: currentUser.username,
          },
        },
        include: {
          enrolledUser: {
            include: {
              submission: true,
            },
          },
          points: true,
        },
      },
    },
  });
  const mentees = await db.user.findMany({
    where: {
      enrolledUsers: {
        some: {
          mentorUsername: currentUser.username,
        },
      },
    },
  });
  notSubmittedMentees = mentees.filter((mentee) => {
    return !assignment?.submissions.some(
      (submission) => submission.enrolledUser.username === mentee.username
    );
  });

  sortedAssignments = assignment?.submissions.sort((a, b) => {
    if (b.enrolledUser.username > a.enrolledUser.username) {
      return -1;
    } else if (b.enrolledUser.username < a.enrolledUser.username) {
      return 1;
    } else {
      return 0;
    }
  });

  isCourseAdmin =
    currentUser?.adminForCourses?.some((course) => course.id === assignment1?.courseId) ?? false;
}
---

<RootLayout title="Assignments">
  <AssignmentPage
    currentUser={currentUser}
    assignment={assignment1}
    assignments={sortedAssignments}
    notSubmittedMentees={notSubmittedMentees}
    isCourseAdmin={isCourseAdmin ?? false}
    username={username ?? ""}
    client:only
  />
</RootLayout>
