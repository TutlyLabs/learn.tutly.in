---
import RootLayout from "@layouts/RootLayout.astro";
import { Calendar } from "./_components/calendar";
import { EventsSidebar } from "./_components/events";
import db from "@/lib/db";
import { format } from "date-fns";

const currentUser = Astro.locals.user;

if (!currentUser) return null;

let courses = await db.course.findMany({
  where: {
    enrolledUsers: {
      some: {
        username: currentUser.username,
      },
    },
  },
  include: {
    classes: {
      include: {
        attachments: {
          where: {
            attachmentType: "ASSIGNMENT",
          },
        },
      },
    },
  },
});

let holidays = await db.holidays.findMany({});

const assignments = courses.flatMap((course) =>
  course.classes.flatMap((classItem) =>
    classItem.attachments.map((attachment) => {
      const createdAtDate = new Date(attachment.createdAt);
      const startDate = new Date(createdAtDate);
      startDate.setHours(0, 0, 0, 0);
      const endDate = new Date(createdAtDate);
      endDate.setHours(23, 59, 59, 999);

      return {
        type: "Assignment",
        name: attachment.title,
        description: `Assignment added on ${format(new Date(attachment.createdAt), "MMMM d, yyyy, EEEE, h:mm a")}`,
        startDate,
        endDate,
        link: `assignments/${attachment.id}`,
      };
    })
  )
);

const classEvents = courses.flatMap((course) =>
  course.classes.map((classItem) => ({
    type: "Class",
    name: classItem.title,
    description: `Session starts at ${format(new Date(classItem.createdAt), "MMMM d, yyyy, EEEE, h:mm a")}`,
    startDate: new Date(classItem.createdAt),
    endDate: new Date(classItem.createdAt.getTime() + 2000 * 60 * 60),
    link: `courses/${course.id}/classes/${classItem.id}`,
  }))
);

const holidayEvents = holidays.map((holiday) => {
  const startDate = new Date(holiday.startDate);
  const endDate = new Date(holiday.endDate);
  startDate.setHours(0, 0, 0, 0);
  endDate.setHours(23, 59, 59, 999);

  return {
    type: "Holiday",
    name: holiday.reason,
    description: holiday?.description || "Observed holiday",
    startDate: startDate,
    endDate: endDate,
    link: "/schedule",
  };
});

const isAuthorized = currentUser?.role === "INSTRUCTOR" || currentUser?.role === "MENTOR" || false;

const events = [...assignments, ...classEvents, ...holidayEvents];
---

<RootLayout title="Events">
  <div class="bg-background h-full">
    <div class="md:flex gap-2">
      <div class="md:fixed">
        <EventsSidebar events={events} client:load />
      </div>
      <div class="md:ml-[300px] md:flex-1">
        <Calendar events={events} isAuthorized={isAuthorized} holidays={holidays} client:load />
      </div>
    </div>
  </div>
</RootLayout>
