---
import "@/styles/globals.css";
import { ViewTransitions } from "astro:transitions";
import { Toaster } from "react-hot-toast";
import Crisp from "@/components/Crisp";
import { RefreshCw } from "lucide-react";
import { getVersion } from "@/lib/version";
import ThemeToggle from "@/components/ThemeToggle";
import PageLoader from "@/components/loader/PageLoader.astro";

interface Props {
  title?: string;
}

const { title = "Tutly" } = Astro.props;

const version = getVersion();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
    <script is:inline>
      const getTheme = () => {
        // change this
        return "dark";

        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      };

      const theme = getTheme();
      document.documentElement.classList[theme === "dark" ? "add" : "remove"]("dark");

      document.addEventListener("astro:after-swap", () => {
        document.documentElement.classList[getTheme() === "dark" ? "add" : "remove"]("dark");
      });
    </script>
    <meta name="theme-color" content="#ffffff" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.webmanifest" />
  </head>
  <body>
    <PageLoader />
    <div class="fixed bottom-2 left-2 flex items-center gap-1.5 px-2 text-xs text-muted-foreground">
      <span>{version}</span>
      <button
        id="checkUpdate"
        class="inline-flex items-center gap-1 rounded-md px-1.5 py-0.5 hover:bg-muted"
        title="Check for updates"
      >
        <RefreshCw className="h-3 w-3 transition-transform" />
      </button>
    </div>
    <div class="fixed right-4 top-4">
      <ThemeToggle client:load />
    </div>
    <Toaster client:load />
    <slot />
    <Crisp client:only="react" />

    <script>
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", async () => {
          try {
            const registration = await navigator.serviceWorker.register("/service-worker.js", {
              scope: "/",
            });

            registration.addEventListener("updatefound", () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener("statechange", () => {
                  if (newWorker.state === "installed" && navigator.serviceWorker.controller) {
                    if (confirm("New version available! Would you like to update?")) {
                      newWorker.postMessage({ type: "SKIP_WAITING" });
                      window.location.reload();
                    }
                  }
                });
              }
            });
          } catch (error) {
            console.error("Service Worker registration failed:", error);
          }
        });

        let refreshing = false;
        navigator.serviceWorker.addEventListener("controllerchange", () => {
          if (!refreshing) {
            refreshing = true;
            window.location.reload();
          }
        });
      }

      const checkUpdateBtn = document.getElementById("checkUpdate");
      const refreshIcon = checkUpdateBtn?.querySelector("svg");

      if (checkUpdateBtn) {
        checkUpdateBtn.addEventListener("click", async () => {
          if ("serviceWorker" in navigator) {
            refreshIcon?.classList.add("animate-spin");
            try {
              const registration = await navigator.serviceWorker.ready;
              await registration.update();
              alert("Successfully checked for updates");
            } catch (error) {
              alert("Failed to check for updates");
              console.error("Update check failed:", error);
            } finally {
              setTimeout(() => {
                refreshIcon?.classList.remove("animate-spin");
              }, 1000);
            }
          } else {
            alert("Service Worker is not supported in this browser");
          }
        });
      }
    </script>

    <script is:inline>
      !(function (t, e) {
        var o, n, p, r;
        e.__SV ||
          ((window.posthog = e),
          (e._i = []),
          (e.init = function (i, s, a) {
            function g(t, e) {
              var o = e.split(".");
              2 == o.length && ((t = t[o[0]]), (e = o[1])),
                (t[e] = function () {
                  t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
                });
            }
            ((p = t.createElement("script")).type = "text/javascript"),
              (p.crossOrigin = "anonymous"),
              (p.async = !0),
              (p.src =
                s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js"),
              (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r);
            var u = e;
            for (
              void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
                u.people = u.people || [],
                u.toString = function (t) {
                  var e = "posthog";
                  return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e;
                },
                u.people.toString = function () {
                  return u.toString(1) + ".people (stub)";
                },
                o =
                  "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(
                    " "
                  ),
                n = 0;
              n < o.length;
              n++
            )
              g(u, o[n]);
            e._i.push([i, s, a]);
          }),
          (e.__SV = 1));
      })(document, window.posthog || []);
      posthog.init("phc_fkSt1fQ3v4zrEcSB1TWZMHGA5B0Q0hAB70JlZcINrMU", {
        api_host: "https://us.i.posthog.com",
        person_profiles: "identified_only",
      });
    </script>
  </body>
</html>
