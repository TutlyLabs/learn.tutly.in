---
import "@/styles/globals.css";
import { ViewTransitions } from "astro:transitions";
import { AppSidebar } from "@/components/sidebar/AppSidebar";
import { AppHeader } from "@/components/sidebar/AppHeader";
import { Toaster } from "react-hot-toast";
import { Toaster as SonnerToaster } from "@/components/ui/sonner";
import { Toaster as ShadcnToaster } from "@/components/ui/toaster";
import Crisp from "@/components/Crisp";
import PageLoader from "@/components/loader/PageLoader.astro";
import { posthog } from "@/lib/posthog";
interface Props {
  title?: string;
  forceClose?: boolean;
  className?: string;
  hideHeader?: boolean;
  hideCrisp?: boolean;
}

const { title = "Tutly", forceClose = false, className, hideHeader = false, hideCrisp = false } = Astro.props;

const pathname = Astro.url.pathname;
const user = Astro.locals.user!;
const organization = Astro.locals.organization!;

const isIntegrationsEnabled = await posthog.isFeatureEnabled(
  "integrations_tab",
  user.email ?? user.username
);

// @ts-ignore
globalThis.pathname = pathname;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
    <script is:inline>
      const getTheme = () => {
        // default to dark
        return "dark";
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      };

      const theme = getTheme();
      document.documentElement.classList[theme === "dark" ? "add" : "remove"]("dark");

      document.addEventListener("astro:after-swap", () => {
        document.documentElement.classList[getTheme() === "dark" ? "add" : "remove"]("dark");
      });
    </script>
    <meta name="theme-color" content="#ffffff" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.webmanifest" />
  </head>
  <body>
    <PageLoader />
    <Toaster client:load />
    {
      user && (
        <div class="flex min-h-screen">
          <div class="relative">
            <AppSidebar
              client:load
              user={user}
              pathname={pathname}
              forceClose={forceClose}
              isIntegrationsEnabled={isIntegrationsEnabled}
            />
          </div>
          <main class="w-full">
            {!hideHeader && <AppHeader client:load user={user} pathname={pathname} />}
            <div class={`p-4 ${className}`}>
              <slot />
            </div>
          </main>
        </div>
      )
    }
    <SonnerToaster client:load />
    <ShadcnToaster client:load />
    {!hideCrisp && <Crisp client:only="react" user={user} organization={organization} />}
    <script>
      const isRunningStandalone = () => {
        return (
          window.matchMedia("(display-mode: standalone)").matches ||
          (navigator as any).standalone === true ||
          document.referrer.includes("android-app://")
        );
      };

      if (isRunningStandalone()) {
        localStorage.setItem("appInstalled", "true");
      }

      if ("serviceWorker" in navigator) {
        window.addEventListener("load", async () => {
          try {
            const registration = await navigator.serviceWorker.register("/service-worker.js", {
              scope: "/",
            });

            registration.addEventListener("updatefound", () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener("statechange", () => {
                  if (newWorker.state === "installed" && navigator.serviceWorker.controller) {
                    if (confirm("New version available! Would you like to update?")) {
                      newWorker.postMessage({ type: "SKIP_WAITING" });
                      window.location.reload();
                    }
                  }
                });
              }
            });

            console.log("Service Worker registered successfully:", registration.scope);
          } catch (error) {
            console.error("Service Worker registration failed:", error);
          }
        });

        let refreshing = false;
        navigator.serviceWorker.addEventListener("controllerchange", () => {
          if (!refreshing) {
            refreshing = true;
            window.location.reload();
          }
        });
      }

      const checkUpdateBtn = document.getElementById("checkUpdate");
      const refreshIcon = checkUpdateBtn?.querySelector("svg");

      if (checkUpdateBtn) {
        checkUpdateBtn.addEventListener("click", async () => {
          if ("serviceWorker" in navigator) {
            refreshIcon?.classList.add("animate-spin");
            try {
              const registration = await navigator.serviceWorker.ready;
              await registration.update();
              alert("Successfully checked for updates");
            } catch (error) {
              alert("Failed to check for updates");
              console.error("Update check failed:", error);
            } finally {
              setTimeout(() => {
                refreshIcon?.classList.remove("animate-spin");
              }, 1000);
            }
          } else {
            alert("Service Worker is not supported in this browser");
          }
        });
      }
    </script>
  </body>
</html>

<style>
  :root {
    --logo-size: 32px;
  }

  [data-logo] {
    width: var(--logo-size);
    height: var(--logo-size);
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  [data-logo] img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
</style>

<script>
  // @ts-nocheck
  !(function (t, e) {
    var o, n, p, r;
    e.__SV ||
      ((window.posthog = e),
      (e._i = []),
      (e.init = function (i, s, a) {
        function g(t, e) {
          var o = e.split(".");
          2 == o.length && ((t = t[o[0]]), (e = o[1])),
            (t[e] = function () {
              t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
            });
        }
        ((p = t.createElement("script")).type = "text/javascript"),
          (p.crossOrigin = "anonymous"),
          (p.async = !0),
          (p.src = s.api_host + "/static/array.js"),
          (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r);
        var u = e;
        for (
          void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
            u.people = u.people || [],
            u.toString = function (t) {
              var e = "posthog";
              return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e;
            },
            u.people.toString = function () {
              return u.toString(1) + ".people (stub)";
            },
            o =
              "capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys getNextSurveyStep onSessionId".split(
                " "
              ),
            n = 0;
          n < o.length;
          n++
        )
          g(u, o[n]);
        e._i.push([i, s, a]);
      }),
      (e.__SV = 1));
  })(document, window.posthog || []);
  posthog.init("phc_fkSt1fQ3v4zrEcSB1TWZMHGA5B0Q0hAB70JlZcINrMU", {
    api_host: "https://us.i.posthog.com",
    person_profiles: "identified_only",
  });
  if (user) {
    posthog.identify(user.id, {
      name: user.name,
      email: user.email,
      role: user.role,
    });
  }
</script>
