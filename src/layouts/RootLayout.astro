---
import "@/styles/globals.css";
import { ViewTransitions } from "astro:transitions";
import { AppSidebar } from "@/components/sidebar/AppSidebar";
import { AppHeader } from "@/components/sidebar/AppHeader";
import { Toaster } from "react-hot-toast";
import { Toaster as SonnerToaster } from "@/components/ui/sonner"

interface Props {
  title?: string;
  forceClose?: boolean;
}

const { title = "Tutly", forceClose = false } = Astro.props;

const pathname = Astro.url.pathname;
const user = Astro.locals.user!;

// @ts-ignore
globalThis.pathname = pathname;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
    <script is:inline>
      const getTheme = () => {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      };

      const theme = getTheme();
      document.documentElement.classList[theme === "dark" ? "add" : "remove"]("dark");
    </script>
  </head>
  <body>
    <div class="loader" transition:persist="loader">
      <div class="loader-bar"></div>
      <div class="loader-shimmer"></div>
    </div>
    <Toaster client:load />
    {user && (
      <div class="flex min-h-screen">
        <div class="relative">
          <AppSidebar client:load user={user} pathname={pathname} forceClose={forceClose} />
        </div>
        <main class="w-full">
          <AppHeader client:load user={user} pathname={pathname} />
          <div class="p-4">
            <slot />
          </div>
        </main>
      </div>
    )}
    <SonnerToaster client:load />
  </body>
</html>

<style>
  .loader {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 9999;
    width: 100%;
    height: 3px;
    pointer-events: none;
  }

  .loader-bar {
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent 0%, hsl(var(--primary)) 50%, transparent 100%);
    transform: translateX(-100%);
    animation: none;
  }

  .loader-shimmer {
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transform: translateX(-100%);
    animation: none;
  }

  .loader.loading .loader-bar {
    animation: loading-bar 1s ease-in-out infinite;
  }

  .loader.loading .loader-shimmer {
    animation: loading-shimmer 1s ease-in-out infinite;
  }

  @keyframes loading-bar {
    0% {
      transform: translateX(-100%);
    }
    50% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(100%);
    }
  }

  @keyframes loading-shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(200%);
    }
  }
</style>

<script>
  let loader: HTMLElement | null = null;
  let loadingTimeout: number;

  document.addEventListener("astro:before-preparation", (event) => {
    if (!loader) {
      loader = document.querySelector(".loader");
    }

    const originalLoader = event.loader;
    event.loader = async function () {
      if (loadingTimeout) {
        clearTimeout(loadingTimeout);
      }

      loader!.classList.add("loading");

      const startTime = performance.now();
      await originalLoader();
      const loadTime = performance.now() - startTime;

      const remainingTime = Math.max(0, 400 - loadTime);
      await new Promise((resolve) => {
        loadingTimeout = Number(
          setTimeout(() => {
            loader!.classList.remove("loading");
            resolve(null);
          }, remainingTime)
        );
      });
    };
  });
</script>
