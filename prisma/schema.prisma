generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  INSTRUCTOR
  MENTOR
  STUDENT
  ADMIN
}

model Organization {
  id String @id @default(uuid())

  orgCode String @unique
  name    String

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String  @id @default(uuid())
  name     String
  username String  @unique
  email    String? @unique
  image    String?
  password String?
  mobile   String?
  role     Role    @default(STUDENT)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  lastSeen      DateTime?
  emailVerified DateTime?

  isProfilePublic Boolean @default(true)

  oneTimePassword String @default(uuid())

  pushSubscriptions PushSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account         Account[]
  course          Course[]
  profile         Profile?
  doubt           Doubt[]
  response        Response[]
  Attendence      Attendance[]
  enrolledUsers   EnrolledUsers[] @relation(name: "user")
  assignedMentees EnrolledUsers[] @relation(name: "mentor")
  adminForCourses Course[]        @relation("CourseAdmins")

  Session Session[]
  Events  Events[]

  notificationsFor    Notification[] @relation("notificationIntendedFor")
  notificationsCaused Notification[] @relation("notificationCausedBy")
  bookMarks           BookMarks[]
  notes               Notes[]

  uploadedFiles       File[] @relation("uploadedFiles")
  archivedFiles       File[] @relation("archivedFiles")
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Personal Details
  dateOfBirth DateTime?
  hobbies     String[]
  aboutMe     String?

  // Basic Details
  secondaryEmail String?
  mobile         String?
  whatsapp       String?
  gender         String?
  tshirtSize     String?

  // Social Links: {"facebook": null, "linkedin": null, "twitter": null, "quora": null, "website": null}
  socialLinks Json? @default("{}")

  // Professional Profiles: {"github": null, "leetcode": null, "codechef": null, "codeforces": null, "hackerrank": null}
  professionalProfiles Json? @default("{}")

  // Academic Details: {"rollNumber": null, "cgpa": null, "marks": null, "grade": null, "percentage": null, "section": null, "branch": null, "academicYear": null}
  academicDetails Json? @default("{}")

  // Experience: [{"company": null, "role": null, "workLocation": null, "workCity": null, "startDate": null, "endDate": null}]
  experiences Json[]

  // Address: {"building": null, "street": null, "city": null, "state": null, "country": null, "pincode": null}
  address Json? @default("{}")

  // Documents: {"resume": null}
  documents Json? @default("{}")

  // Additional Metadata for Future Extensions
  metadata Json? @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FileType {
  AVATAR
  ATTACHMENT
  NOTES
  OTHER
}

model File {
  id            String   @id @default(uuid())
  name          String // fileName
  internalName  String // uuid + timestamp + file extension
  associatingId String? // reference model id
  fileType      FileType @default(OTHER)

  isPublic Boolean @default(false)
  publicUrl String?

  isUploaded   Boolean @default(false)
  uploadedById String?
  uploadedBy   User?   @relation("uploadedFiles", fields: [uploadedById], references: [id])

  isArchived    Boolean   @default(false)
  archivedById  String?
  archivedBy    User?     @relation("archivedFiles", fields: [archivedById], references: [id])
  archiveReason String?   @db.Text
  archivedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PushSubscription {
  id String @id @default(uuid())

  endpoint String @unique
  p256dh   String
  auth     String

  // deviceId  String   @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum NotificationMedium {
  PUSH
  NOTIFICATION
  EMAIL
  WHATSAPP
  SMS
}

enum NotificationEvent {
  CLASS_CREATED
  ASSIGNMENT_CREATED
  ASSIGNMENT_REVIEWED
  LEADERBOARD_UPDATED
  DOUBT_RESPONDED
  ATTENDANCE_MISSED
  CUSTOM_MESSAGE
}

model Notification {
  id String @id @default(uuid())

  intendedFor   User   @relation("notificationIntendedFor", fields: [intendedForId], references: [id])
  intendedForId String

  mediumSent NotificationMedium @default(PUSH)

  causedBy   User?   @relation("notificationCausedBy", fields: [causedById], references: [id])
  causedById String?

  eventType     NotificationEvent
  message       String?           @db.Text
  causedObjects Json?             @default("{}")
  readAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id            String          @id @default(uuid())
  createdById   String
  createdBy     User            @relation(fields: [createdById], references: [id])
  title         String
  image         String?
  enrolledUsers EnrolledUsers[]
  classes       Class[]
  attachments   Attachment[]
  doubts        Doubt[]

  startDate DateTime  @default(now())
  endDate   DateTime?

  isPublished  Boolean @default(false)
  courseAdmins User[]  @relation("CourseAdmins")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EnrolledUsers {
  id String @id @default(uuid())

  username String
  user     User   @relation(name: "user", fields: [username], references: [username])

  mentorUsername String?
  mentor         User?   @relation(name: "mentor", fields: [mentorUsername], references: [username])

  startDate DateTime  @default(now())
  endDate   DateTime?

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])

  submission submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, courseId, mentorUsername])
}

model Class {
  id          String       @id @default(uuid())
  title       String       @default("class")
  video       Video        @relation(fields: [videoId], references: [id])
  attachments Attachment[]
  courseId    String?
  course      Course?      @relation(fields: [courseId], references: [id])
  videoId     String
  Attendence  Attendance[]

  folderId  String?
  Folder    Folder?  @relation(fields: [folderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookMarkCategory {
  ASSIGNMENT
  CLASS
  DOUBT
  NOTIFICATION
}

model BookMarks {
  id String @id @default(uuid())

  category      BookMarkCategory
  objectId      String
  causedObjects Json?            @default("{}")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, objectId])
}

enum NoteCategory {
  CLASS
  ASSIGNMENT
  DOUBT
}

model Notes {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  category      NoteCategory
  objectId      String
  causedObjects Json?        @default("{}")

  description String?
  tags        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, objectId])
}

model Folder {
  id    String  @id @default(uuid())
  title String  @default("Folder")
  Class Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id String @id @default(uuid())

  username String
  user     User   @relation(fields: [username], references: [username])

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  attendedDuration Int?
  attended         Boolean @default(false)

  data Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, classId])
}

model Doubt {
  id          String     @id @default(uuid())
  title       String?
  description String?
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  courseId    String?
  course      Course?    @relation(fields: [courseId], references: [id])
  response    Response[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Response {
  id          String  @id @default(uuid())
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  doubt       Doubt   @relation(fields: [doubtId], references: [id], onDelete: Cascade)
  doubtId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VideoType {
  DRIVE
  YOUTUBE
  ZOOM
}

model Video {
  id         String    @id @default(uuid())
  videoLink  String?
  videoType  VideoType
  timeStamps Json?
  class      Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum attachmentType {
  ASSIGNMENT
  GITHUB
  ZOOM
  OTHERS
}

enum submissionMode {
  HTML_CSS_JS
  REACT
  EXTERNAL_LINK
}

model Attachment {
  id             String         @id @default(uuid())
  title          String         @default("Attachment")
  details        String?
  attachmentType attachmentType
  link           String?
  submissions    submission[]
  maxSubmissions Int?           @default(1)
  classId        String?
  class          Class?         @relation(fields: [classId], references: [id])
  courseId       String?
  course         Course?        @relation(fields: [courseId], references: [id])
  submissionMode submissionMode @default(HTML_CSS_JS)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dueDate   DateTime?
}

model submission {
  id             String        @id @default(uuid())
  enrolledUserId String
  enrolledUser   EnrolledUsers @relation(fields: [enrolledUserId], references: [id])

  attachmentId String
  assignment   Attachment @relation(fields: [attachmentId], references: [id])

  data Json?

  points Point[]

  overallFeedback String?

  editTime DateTime @default(dbgenerated("(NOW() + '15 minutes'::interval)"))

  submissionLink String?
  submissionDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum pointCategory {
  RESPOSIVENESS
  STYLING
  OTHER
}

model Point {
  id           String        @id @default(uuid())
  category     pointCategory
  feedback     String?
  score        Int           @default(0)
  submissions  submission?   @relation(fields: [submissionId], references: [id])
  submissionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([submissionId, category])
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid())

  expiresAt DateTime
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventCategory {
  ASSIGNMENT_SUBMISSION
  ASSIGNMENT_EVALUATION
  NEW_USER_GOOGLE_LOGIN
  USER_GOOGLE_LOGIN
  USER_CREDENTIAL_LOGIN
  ATTACHMENT_CREATION
  CLASS_CREATION
  STUDENT_ENROLLMENT_IN_COURSE
  DOUBT_CREATION
  DOUBT_RESPONSE
}

model Events {
  id String @id @default(uuid())

  message             String?
  eventCategory       EventCategory
  eventCategoryDataId String?

  causedById String
  causedBy   User   @relation(fields: [causedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
